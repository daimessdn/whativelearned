const data = [
    {
        title: "Execute Python file on Node.js",
        description: "Want to run Python file using Node.js? Yes, you can!",
        date: "December, 31st 2020",
        tags: ["javascript", "nodejs", "python"],
        content: "**Node.js** is a very powerful tool for every single web development purposes. One of the useful function of Node.js is executing **Python** file on website using `child-process`.\n\n### Preparing Node.js project\n\nFirst thing, we need to create a Node.js project on our computer by creating a folder named \"python-nodejs\" (for example, you can name it by something else you like), and then initiate `npm` to install some dependencies. In your terminal (or command prompt or something else (maybe)), type\n\n```bash\nmkdir python-nodejs\ncd python-nodejs\nnpm init --yes\n```\n\nAfter we created the project, we can install `express` by one-line command below in your terminal.\n\n```bash\nnpm install express\n```\n\n### Create a Python and JavaScript file\n#### Doing in Python file\n\nStill in folder **python-nodejs**, create a JavaScript file named `index.js` and also a Python file named `hello.py`. In `hello.py`, we can write a simple Python script like this.\n\n```py\nprint(\"Hello, world!\")\n```\n\n#### Doing in JavaScript file\n\n##### Importing dependencies\n\nAnd let's do the work for our `index.js` file. Firstly, we need to import `express` package and `child-process` and initiate them by adding this JavaScript code below\n\n```js\nconst express = require('express');\nconst {spawn} = require('child_process');\nconst app = express();\nconst port = 3000;  // port\n```\n\n##### Create spawn process\n\nAfter importing packages, let's initiate Python **spawn** script to make us execute Python file. Make a route `/` and insert the `python` spawn process inside the route function.\n\n```js\napp.get('/', (req, res) => {\n  let result;  // init'd result\n  \n  // define new child process\n  //// to execute the Python script\n  const python = spawn('python', ['hello.py']);\n});\n```\n\n##### Collect data from Python file\n\nStill inside the route function, let's add some function to collect the data in Python file by adding this file after `const python = spawn('python, ['hello.py']);`\n\n```js\n// collect data from script\npython.stdout.on('data', function (data) {\n  console.log('Getting data from python script ...');\n  result = data.toString();\n});\n```\n\n##### Closing process\nStill inside the route function let's close the process data and send it on our website by adding this function.\n\n```js\n// in close event we are sure that stream from child process is closed\n  python.on('close', (code) => {\n    console.log(`child process close all stdio with code ${code}`);\n    \n    // send data to browser\n    res.send(result);\n  });\n```\n\n##### Listen to server\nTo make sure our website can be run, we need to make the app listen to server by certain port. By typing\n```js\napp.listen(port, () => {\n  console.log(`listening on http://localhost ${port}!`);\n});\n```\n\nAnd finally, our `index.js` file will be [like this](https://gist.github.com/daimessdn/46970454b53662dbf6cb05ccdd598b01#file-index-js).\n\n### Execution\n\nAfter we doing some coding stuff in our `hello.py` and `index.js`, finally, we can execute `node index.js` to run Node.js server and typing `http://localhost:3000` in our browser, we can see the `Hello, world!` result is appear on our website."
    },
    {
        title: "Getting started with PWA: Vanilla JavaScript use case",
        description: "New to Progressive Web Apps or PWA? Let's do the simple PWA using Vanilla JavaScript",
        date: "January, 3rd 2021",
        tags: ["pwa", "javascript"],
        content: "Progressive Web App or as known as **PWA** brings our website environment like native mobile application that we can use in our mobile. PWA brings an native-app-like experiences for our web apps so that we can install them on mobile (home screen, I mean, really home screen), access it by offline, push notifications, and more.\nnTo begin create Progressive Web Apps, we need to know the **manifest** and **service worker**.\n-  **Manifest** in PWA is a simple JSON file that tells the browser brief information about your app and **how should it been installed**, meanwhile\n- **Service worker** is some script that makes our app can be **run offline**.\n\n## Starter pack for PWA\n\nBefore we begin, let's start with my simple `simpth` (simple synthpad) project named `simpth-start`, which we can use for getting started on creating project. `simpth-start` consists of `index.html`, `main.css`, `main.js`, and `Tone.js` which can be seen the entire code and contents [here](https://github.com/daimessdn/simpth).\n\n## Creating the `manifest.json`\n\nAs explained before, `manifest.json` desribes about our app and how should it installed in home screen or desktop. We can just create `manifest.json` in our start project and type\n\n```js\n{\n  \"name\": \"simpth\",\n  \"short_name\": \"simpth\",\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#3f1d6b\",\n  \"theme_color\": \" #202020\",\n  \"orientation\": \"portrait-primary\"\n}\n```\n\nLet's look at our `manifest.json` file what contains.\n- `name`: when the browser launches the **splash screen**, it will be the name displayed on the screen.\n- `short_name`: will be displayed **under app shortcut** on home screen.\n- `start_url`: page shown the **page is open** when the app started (HTML file or root directory if you use back-end or front-end server)\n- `display`: tells us **how to display** the app. There are several choices of display:\n  - `minimal-ui`\n  - `fullscreen`\n  - `browser`\n  - `standalone`\n- `background-color`: splash screen background color\n- `theme-color`: status bar background color\n- `orientation`: browser orientation when displaying the app\n- `icons`: icon selected to display the splash screen. There are 3 required properties for each icon to display the icon: `src`, `type`, and `sizes`. We can use one, two, many, or no icons.\n\n## Applying `manifest` on `index.html`\n\nIn our `index.html`, let's add the `link` manifest tag inside `<head>` tag.\n```html\n<link rel=\"manifest\" href=\"manifest.json\" />\n```\n\n## Adding `serviceWorker.js` into `main.js`\n\nAnd finally, let's add **service workers** into our new `serviceWorker.js` file.\n\n```js\nself.addEventListener(\"install\", installEvent => {\n  installEvent.waitUntil(\n    caches.open(\"simpth-pwa-1\").then(cache => {\n      cache.addAll(assets)\n    })\n  )\n});\n\nself.addEventListener(\"fetch\", fetchEvent => {\n  fetchEvent.respondWith(\n    caches.match(fetchEvent.request).then(res => {\n      return res || fetch(fetchEvent.request)\n    })\n  )\n});\n```\n\n## Register the service worker into main.js\n\n```js\nif (\"serviceWorker\" in navigator) {\n  window.addEventListener(\"load\", function() {\n    navigator.serviceWorker\n      .register(\"./serviceWorker.js\")\n      .then(res => console.log(\"service worker registered\"))\n      .catch(err => console.log(\"service worker not registered\", err))\n  })\n}\n```"
    }
];
